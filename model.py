# -*- coding: utf-8 -*-
"""model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wLUGrsRHbzhmdGJwANHwbSmbTf8TzPAO
"""

# model.py

import pandas as pd
import numpy as np
import re
import datetime
from pycaret.regression import load_model, predict_model
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import inch

# 1. Load trained model
loaded_model = load_model('growth_rate_model')

# 2. Load new input data
df_predict = pd.read_csv('test_data.csv')
df_predict.columns = [re.sub(r'[^A-Za-z0-9_]+', '_', c.strip()) for c in df_predict.columns]
df_predict = df_predict.loc[:, ~df_predict.columns.str.contains('^Unnamed')]

# 3. Clean categorical values
for col in ['Ultrasound_Features','Reported_Symptoms','Region',
            'Recommended_Management','Menopause_Status']:
    if col in df_predict.columns:
        df_predict[col] = (df_predict[col].fillna('Unknown').astype(str)
                           .str.replace(r'[^A-Za-z0-9_ ]+', '', regex=True)
                           .str.replace(' ', '_'))

# 4. Rename columns
df_predict = df_predict.rename(columns={
    'Age': 'age',
    'CA_125_Level': 'ca125',
    'Cyst_Size_cm': 'size',
    'Menopause_Status': 'menopause',
    'Ultrasound_Features': 'ultrasound',
    'Reported_Symptoms': 'symptoms',
    'Recommended_Management': 'management',
    'Region': 'region'
})

model_features = ['age', 'ca125', 'size', 'menopause', 'ultrasound', 'symptoms', 'management', 'region']
if 'Patient_ID' in df_predict.columns:
    data_for_prediction = df_predict[['Patient_ID'] + [col for col in model_features if col in df_predict.columns]].copy()
else:
    data_for_prediction = df_predict[[col for col in model_features if col in df_predict.columns]].copy()

# 5. Predict
result = predict_model(loaded_model, data=data_for_prediction)

# 6. Classify
def classify_growth(rate):
    if rate <= 0:
        return 'Shrinking'
    elif rate < 0.012:
        return 'Stable'
    elif rate < 0.020:
        return 'Moderate-growing'
    else:
        return 'Fast-growing'

if 'prediction_label' in result.columns:
    result['growth_category'] = result['prediction_label'].apply(classify_growth)

# 7. Generate PDF
def export_custom_pdf(df, filename='cyst_growth_report.pdf', top_n=10):
    doc = SimpleDocTemplate(filename, pagesize=landscape(A4))
    story = []
    styles = getSampleStyleSheet()

    story.append(Paragraph("ðŸ“Š Ovarian Cyst Growth Rate Report", styles['Heading1']))
    story.append(Paragraph(f"ðŸ•’ Generated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}", styles['Normal']))
    story.append(Spacer(1, 16))

    header = []
    if 'Patient_ID' in df.columns:
        header.append('Patient ID')
    header += ['Age', 'CAâ€‘125 (U/mL)', 'Size (cm)', 'Menopause', 'Ultrasound',
               'Management', 'Region', 'Predicted Growth (cm/day)', 'Category']

    data = [header]

    for _, row in df.head(top_n).iterrows():
        row_data = []
        if 'Patient_ID' in df.columns:
            row_data.append(row.get('Patient_ID', ''))

        row_data += [
            int(row.get('age', 0)),
            f"{row.get('ca125', 0):.3f}",
            f"{row.get('size', 0):.3f}",
            row.get('menopause', ''),
            row.get('ultrasound', ''),
            row.get('management', ''),
            row.get('region', ''),
            f"{row.get('prediction_label', 0):.3f}",
            row.get('growth_category', '')
        ]
        data.append(row_data)

    col_widths = [1.3*inch, 0.7*inch, 1*inch, 1*inch, 1.3*inch,
                  1.3*inch, 1*inch, 1.3*inch, 1.3*inch]
    if 'Patient_ID' in df.columns:
        col_widths.insert(0, 1.3*inch)

    table = Table(data, colWidths=col_widths)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.darkblue),
        ('GRID', (0, 0), (-1, -1), 0.4, colors.grey),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
    ]))

    story.append(table)
    doc.build(story)
    print(f"ðŸ“„ PDF report saved: {filename}")

export_custom_pdf(result)

# 8. Show Top 10
columns_to_show = [col for col in ['Patient_ID', 'age', 'ca125', 'size', 'management', 'region', 'prediction_label', 'growth_category'] if col in result.columns]
top10 = result.sort_values(by='prediction_label', ascending=False).head(10)

print("\nðŸ“‹ Top 10 Fastest-Growing Cyst Cases:")
print(top10[columns_to_show].to_string(index=False))